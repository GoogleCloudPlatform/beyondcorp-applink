#!/bin/bash
#
## Copyright 2021 Google LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
#
#
# Installs the BeyondCorp Remote Agent

set -euo pipefail

readonly BEYONDCORP_REPOSITORIES='gcr.io/appconnector-external-release'
readonly REMOTE_AGENT_REPOSITORY="${BEYONDCORP_REPOSITORIES}/appconnector_remote_cp"
readonly REMOTE_AGENT_INSTALLER_ENTRYPOINT='/applink_control_runtime/bin/install'
readonly BEYONDCORP_SERVICE='beyondcorp'

BEYONDCORP_USER='beyondcorp'
CONNECTOR_NAME=''
SERVICE_ACCOUNT=''

# logger
INFO() { echo "INFO: ${1}"; }
WARN() { echo "WARN: ${1}"; }
ERROR() { echo "ERROR: ${1}"; }
FATAL() { echo "FATAL: ${1}"; exit 1; }

repeat() {
  for ((i = 0; i < "${2}"; i++)); do
    echo -n "${1}"
  done
  echo
}

title() {
  local len="${#1}"
  repeat "#" "$((len + 4))"
  echo "# ${1} #"
  repeat "#" "$((len + 4))"
}

# 1. flags
usage() {
  cat << USAGE
  Configure and start beyondcorp remote agent installer
  Usage: $0 [-u <beyondcorp_user>] -c <connector_name> -s <service_account>
  -h                       Print this help message.
  -u <beyondcorp_user>     The user the beyondcorp remote agent will run as.
                           Default is "${BEYONDCORP_USER}" if not specified.
  -c <connector_name>      The connector name using the form
                           "projects/{project_id}/locations/{location_id}/connectors/{connector_id}".
  -s <service_account>     The service account email to use for authentication
                           (sa-name@project-id.iam.gserviceaccount.com)
USAGE
}

install_complete_message() {
  cat << INSTALL_COMPLETE_MESSAGE
#################################################################################
# BeyondCorp Remote Agent has been successfully installed and started.          #
#                                                                               #
# Instructions:                                                                 #
# ----------------------------------------------------------------------------- #
# |Stop  | sudo systemctl stop beyondcorp & sudo systemctl disable beyondcorp | #
# |Start | sudo systemctl start beyondcorp & sudo systemctl enable beyondcorp | #
# ----------------------------------------------------------------------------- #
#################################################################################
INSTALL_COMPLETE_MESSAGE
}

forbid_empty_flag() {
  if [[ -z "${1}" ]]; then
    ERROR "Empty flag '${2}' is forbidden."
    echo
    usage >&2
    exit 1
  fi
}

parse_flags() {
  title 'Parsing flags...'
  while getopts 'hu:c:s:' opt; do
    case "${opt}" in
      h)
        usage
        exit 0
        ;;
      u) BEYONDCORP_USER="${OPTARG}" ;;
      c) CONNECTOR_NAME="${OPTARG}" ;;
      s) SERVICE_ACCOUNT="${OPTARG}" ;;
      ?)
        usage >&2
        exit 1
        ;;
    esac
  done
  forbid_empty_flag "${BEYONDCORP_USER}" "<beyondcorp_user>"
  forbid_empty_flag "${CONNECTOR_NAME}" "<connector_name>"
  forbid_empty_flag "${SERVICE_ACCOUNT}" "<service_account>"
}

# 2. checks
check_dependency() {
  INFO "Checking dependency '${1}'"
  if ! ${2}; then
    FATAL "Missing mandatory command: '${1}'. ${3}."
  fi
  echo
}

precondition_checks() {
  title 'Checking dependencies...'
  check_dependency "docker" "docker version" "Please install Docker Engine on this machine (https://docs.docker.com/engine/install/)."
  check_dependency "systemctl" "systemctl --version" "Please install systemctl on this machine (https://www.man7.org/linux/man-pages/man1/systemctl.1.html)."
}

# 3. user
add_user() {
  title 'Adding user...'
  if id "${BEYONDCORP_USER}" &> /dev/null; then
    INFO "User '${BEYONDCORP_USER}' already exists. Continue."
  else
    INFO "Adding user '${BEYONDCORP_USER}'."
    if ! sudo useradd "${BEYONDCORP_USER}"; then
      FATAL "Failed to add user '${BEYONDCORP_USER}'."
    fi
  fi

  if id -nG "${BEYONDCORP_USER}" | grep -qw "docker"; then
    INFO "User '${BEYONDCORP_USER}' belongs to group 'docker'. Continue."
  else
    INFO "Appending user '${BEYONDCORP_USER}' to group 'docker'."
    if ! sudo usermod -aG "docker" "${BEYONDCORP_USER}"; then
      FATAL "Failed to append user '${BEYONDCORP_USER}' to group 'docker'."
    fi
  fi
}

# 4. docker
docker_flags=(
  -v /:/mounted_host_root
  -v "${HOME}":/mounted_host_home
  --entrypoint="${REMOTE_AGENT_INSTALLER_ENTRYPOINT}"
)

install() {
  title 'Installing BeyondCorp Remote Agent...'
  installer_flags=(
    --connector_name="${CONNECTOR_NAME}"
    --service_account="${SERVICE_ACCOUNT}"
    --uid="$(id -u "${BEYONDCORP_USER}")"
    --gid="$(id -g "${BEYONDCORP_USER}")"
  )
  # Pull before run. Otherwise, docker reuse the local one with tag `latest`
  # which may not be the latest version.
  docker pull "${REMOTE_AGENT_REPOSITORY}:latest"
  if ! docker run --rm "${docker_flags[@]}" "${REMOTE_AGENT_REPOSITORY}:latest" "${installer_flags[@]}"; then
    FATAL "Failed to install BeyondCorp Remote Agent."
  fi
  # TODO(shixiong): decide whether to remove `${REMOTE_AGENT_REPOSITORY}:latest`
  # . If the stable and unstable version won't use it, we should remove it. The
  # image with tag `latest` won't be used during the run time.
}

# 5. systemd service
start_service() {
  title 'Starting systemd service...'
  INFO "Enabling systemd service '${BEYONDCORP_SERVICE}'."
  if ! sudo systemctl enable "${BEYONDCORP_SERVICE}"; then
    FATAL "Failed to enable systemd service '${BEYONDCORP_SERVICE}'."
  fi
  INFO "Starting systemd service '${BEYONDCORP_SERVICE}'."
  if ! sudo systemctl start "${BEYONDCORP_SERVICE}"; then
    FATAL "Failed to start systemd service '${BEYONDCORP_SERVICE}'."
  fi
}

# main
parse_flags "$@"
precondition_checks
add_user
install
start_service
install_complete_message
